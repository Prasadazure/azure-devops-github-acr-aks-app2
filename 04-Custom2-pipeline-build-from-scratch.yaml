# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main
# Varibales
variables:
  tag: '$(Build.BuildId)-$(Build.SourceVersion:0:7)'

stages:
# Build stage
- stage: Build 
  displayName: Build Stage
  jobs:
  - job: Build
    displayName: Build Job
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    # Debug Script - Print Variables
    - script: echo " Docker Tag will be:$(tag)"
      displayName: 'Print Docker Tag'
    # Task1: Build Docker Image and push to ACR
    - task: Docker@2
      inputs:
        containerRegistry: 'manual-aks-devops-acr-svc'
        repository: 'custom2aksnginxapp1'
        command: 'buildAndPush'
        Dockerfile: '**/Dockerfile'
        tags:
          $(tag)
          $(Build.SourceVersion)
    
   ## Publish Artifacts pipeline code in addition to Build and Push
    - bash: echo Contents in System Default Working Directory; ls -R $(System.DefaultWorkingDirectory)
    - bash: echo Contents in System Default Working Directory; ls -R $(Build.ArtifactStaginggDirectory)
    # Task-2: Copy files (Copy files from a source folder to target folder)
    # Source Directory: $(System.DefaultWorkingDirectory)/kube-manifests
    # Target Directory: $(Build.ArtifactStagingDirectory)
    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)/kube-manifests'
        Contents: '**'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
        OverWrite: true
    # List files from Build Artifact Staging Directory - After Copy
    - bash: echo After copying to Build Artifact Directory ; ls -R $(Build.ArtifactStaginggDirectory)
    #Task3: Publsih buidl artifacts ( Publish build to Azure Pipelines)
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'kube-manifests'
        publishLocation: 'Container'

    

